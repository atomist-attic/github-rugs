#!/bin/bash
# manually publish this Rug archive to a team configured in your
# ~/.atomist/cli.yml, atomist-staging by default

set -o pipefail

declare Pkg=publish-to-team
declare Version=0.1.0

function msg () {
    echo "$Pkg: $*"
}

function err () {
    msg "$*" 1>&2
}

function main () {
    local default_team_id=atomist-staging
    local err_image=.atomist/build/error

    local arg
    for arg in "$@"; do
        case "$arg" in
            -h | --help | --hel | --he | --h)
                cat <<EOF
Publish Rug archive to a team.
Usage: $Pkg [TEAM_ID]

TEAM_ID defaults to ${default_team_id}.  It can be either a name or Slack ID
of a team configured in your ~/.atomist/cli.yml .
EOF
                return 0
                ;;
            -*)
                err "unknown option: $arg"
                return 2
                ;;
        esac
    done

    local team_id=$1
    if [[ ! $team_id ]]; then
        team_id=$default_team_id
    else
        shift
    fi

    # To publish to staging, we need to
    # - be on the tip of origin/master
    # - bump the version
    #    - npm version patch
    #    - npm install
    # - push the updated version to origin
    #    - both package.json and package-lock.json
    # - publish to a team
    # - print some ascii art

    if ! cd $(git rev-parse --show-toplevel); then
        err "unable to change to top directory of repo"
        return 1
    fi

    if ! git fetch > /dev/null 2>&1; then
        err "git fetch failed"
        return 1
    fi
    local branch
    branch=$(git rev-parse --abbrev-ref HEAD)
    if [[ $? -ne 0 || ! $branch ]]; then
        err "failed to determine git branch: $branch"
        return 1
    fi
    if [[ $branch != master ]]; then
        cat "$err_image" 1>&2
	    err "you must be on the master branch to publish"
	    return 1
    fi

    local local_head origin_head
    local_head=$(git rev-parse master)
    if [[ $? -ne 0 || ! $local_head ]]; then
        err "failed to determine local HEAD: $local_head"
        return 1
    fi
    origin_head=$(git rev-parse origin/master)
    if [[ $? -ne 0 || ! $origin_head ]]; then
        err "failed to determine origin HEAD: $origin_head"
        return 1
    fi
    if [[ $local_head != $local_head ]]; then
        cat "$err_image" 1>&2
	    err "please push all your changes to origin before publishing"
	    # todo: push if we're ahead?
	    return 1
    fi
    local git_status
    git_status=$(git status --porcelain)
    if [[ $? -ne 0 ]]; then
        err "failed to determine git status: $git_status"
        return 1
    fi
    if [[ $git_status ]]; then
        cat "$err_image" 1>&2
	    err "please commit your changes (and push) before publishing" >&2
	    return 1
    fi

    # bump the version
    if ! ( cd .atomist && npm version patch ); then
        err "failed to increment package version patch level"
        return 1
    fi
    # update origin/master
    if ! git add .atomist/package.json .atomist/package-lock.json; then
        err "failed to git add package files"
        return 1
    fi

    local pkg_version
    pkg_version=$(jq -er .version .atomist/package.json)
    if [[ $? -ne 0 || ! $pkg_version ]]; then
        err "failed to determine new package version: $pkg_version"
        return 1
    fi

    local commit_msg="Bump version to $pkg_version

Increment version patch level for publishing to ${team_id}.
"
    if ! git commit -m "$commit_msg"; then
        err "failed to commit changes to package version"
        return 1
    fi

    if ! git push; then
        err "failed to git push"
        return 1
    fi

    # publish to a team!
    msg "publishing $pkg_version to $team_id"
    if ! rug publish --id "$team_id"; then
        err "failed to publish version $pkg_version to team $team_id"
        return 1
    fi
    sed -e "s/vvvvvvv/$pkg_version/" -e "s/ttttttt/$team_id/" .atomist/build/success
}

main "$@" || exit 1
exit 0
